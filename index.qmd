---
title: "NBHF Clusters: Streamlined Results"
author: Jackson Vanfleet-Brown
date: 02/25/2024
editor: source
---

## Intro {.unnumbered}

We want to identify clusters within our training set before we make our classifier learn from it. There are two objectives for unsupervised clustering:

1. Look across species to identify whether species classes form separate clusters (@sec-species).
    - The existence of clusters suggests that there are meaningful differences between classes that the classifier can be trained to recognize.
2. Look within species classes to assess variability among events (@sec-events).
    -  The existence of clusters within an individual species class may indicate that there are outlying events with anomalous features that should be excluded from the training set.

```{r}
#| output: false

library(identidrift) # package with training data. On GitHub, "jackvfb/identidrift"
library(tidyverse)
library(vegan)
library(densityClust)
```
## Objective 1 {#sec-species}

### Method

```{r}
#| output: false
#| echo: true

set.seed(123)

# slice sample of 200 clicks from each species
samp <- train.ec %>%
  group_by(species) %>%
  slice_sample(n=120) %>%
  ungroup()

samp_rm <- samp %>% 
  # drop metadata
  select(-c(UID:noiseLevel, BinaryFile, eventLabel,detectorName, db)) %>% 
  # drop variables to avoid creating artifacts in the cluster plot.
  select(species, eventId, duration:peak, Q_10dB:centerkHz_3dB) %>%
  # perform logarithmic transform for non-normally distributed variables
  mutate(log_duration = log(duration), log_Q_3dB = log(Q_3dB), log_Q_10dB = log(Q_10dB), .keep = "unused")

# calculate Euclidean distances
dist <- samp_rm %>%
  select(-c(species, eventId)) %>%
  mutate(id = 1:n()) %>%
  column_to_rownames("id") %>%
  scale() %>%
  dist(method="euclidean")

cl <- densityClust(dist)
# set rho and delta values
cl <- findClusters(cl, rho=10, delta=2.5)
```
Using the above method, the density clustering algorithm formed the clusters shown in @fig-density-clust. The counts of each species in each of the resulting clusters is given in @tbl-clust-assn. The MDS plot is shown with the points colored by species in @fig-mds-species.

```{r}
#| label: fig-density-clust
#| fig-cap: "Density clusters with Four clusters formed with \u03c1=25 and \u03B4=2"

plotDensityClust(cl)
```

```{r}
#| label: tbl-clust-assn
#| tbl-cap: "Table of cluster assignments"

table(samp_rm$species, cl$clusters)
```

```{r}
#| label: fig-mds-species
#| warning: false
#| fig-cap: "MDS plot showing distances between clicks in the training set, colored by species"

mds <- as_tibble(cmdscale(dist))
mds <- cbind(mds, "species" = samp_rm$species)

ggplot(data = mds) +
  geom_point(aes(V1, V2, color = species)) +
  xlab("Dimension 1") +
  ylab("Dimension 2")
```


### Discussion

- Each of the three clusters appears to be dominated by a different species class:
  - Cluster 1: Dall's porpoise
  - Cluster 2: *Kogia*
  - Cluster 3: harbor porpoise
- The MDS plot similarly shows that clicks separate into three different clusters by species class.

## Objective 2 {#sec-events}

We will now subset the training data by species and then re perform density clustering to identify anomalous events.

### Method

```{r}
#| echo: true
#| output: false

set.seed(123)

samp_rm <- train.ec %>% 
  # drop metadata
  select(-c(UID:noiseLevel, BinaryFile, eventLabel,detectorName, db)) %>% 
  # drop variables to avoid creating artifacts in the cluster plot.
  select(species, eventId, duration:peak, Q_10dB:centerkHz_3dB) %>%
  # perform logarithmic transform for non-normally distributed variables
  mutate(log_duration = log(duration), log_Q_3dB = log(Q_3dB), log_Q_10dB = log(Q_10dB), .keep = "unused")


sp <- c("ks", "pd", "pp")
# subset data by species
samp_sp <- lapply(sp, \(x) filter(samp_rm, species==x))
# create distance matrices.
dist_sp <- lapply(samp_sp, \(s) s %>% select(-c(species, eventId)) %>% mutate(id = 1:n()) %>% column_to_rownames("id") %>% scale() %>% dist())
cl_sp <- lapply(dist_sp, densityClust)
# Perform density clustering. Static values chosen for rho and delta.
# This decision does not seem to be critical, because the algorithm strongly favors a single cluster for each species.
cl_sp <- lapply(cl_sp, findClusters, delta = 8, rho = 5)
```

@fig-event-clusters shows the resulting density cluster plots and @fig-mds-events shows the plots with the points colored by event.

```{r}
#| label: fig-event-clusters
#| fig-cap: "Click clusters for each species class"
#| fig-subcap:
#|     - "*Kogia*"
#|     - "Dall's porpoise"
#|     - "Harbor porpoise"

plotDensityClust(cl_sp[[1]])
plotDensityClust(cl_sp[[2]])
plotDensityClust(cl_sp[[3]])
```

```{r}
#| label: fig-mds-events
#| fig-cap: "MDS plot showing distances between clicks, colored by event. Legend is hidden for harbor porpoise due to large number of events."
#| fig-subcap:
#|     - "*Kogia*"
#|     - "Dall's porpoise"
#|     - "Harbor porpoise"
#| 

mds_sp <- lapply(dist_sp, function(x) {as_tibble(cmdscale(x))})
mds_sp <- map2(mds_sp, samp_sp, function(x, y) {cbind(x, "eventId" = y$eventId)})

makePlot <- function(x) {
  ggplot(data = x) +
    geom_point(aes(V1, V2, color = eventId), show.legend = TRUE) +
    xlab("Dimension 1") +
    ylab("Dimension 2")
}

makePlot(mds_sp[[1]])
makePlot(mds_sp[[2]])
makePlot(mds_sp[[3]]) + guides(color=FALSE)
```

### Discussion

- The density clustering algorithm appears to strongly favor a single cluster for both Dall's porpoise and harbor porpoise, suggesting that there are no outlying events.
- When points are colored by event, variation among events is more evident. This variation does not appear to be strong enough to manifest as more than one density-based cluster, except in the case of *Kogia*.
- In the case of *Kogia*, a solution of two clusters appears to be favored.
  - Cluster 1, the smaller cluster, derives most of its clicks from the event identified as `PG2_02_09_CCES_023_Ksp - Copy.OE4`.
  - This same event, which happens to be the largest *Kogia* event in the training set, has the majority of its clicks in the dominant cluster, cluster 2. This is shown in @tbl-ks-clusters.
  - In the *Kogia* distance plot, you can see a tight cluster of purple dots corresponding to the event in question. This appears to be the signal that is causing the density clustering algorithm to create a second cluster.

```{r}
#| label: tbl-ks-clusters
#| tbl-cap: "Cluster assignments of *Kogia* clicks, separated by event"

table(samp_sp[[1]]$eventId, cl_sp[[1]]$clusters)
```
