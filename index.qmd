---
title: "Check Up on NBHF Clusters"
author: Jackson VB
date: 02/16/2024
editor: source
echo: false
toc: true
---

## Intro {.unnumbered}

We want to identify clusters within our training set before we make our classifier learn from it. There are two objectives for unsupervised clustering:

1. Look across species to identify whether species classes form separate clusters.
    - The existence of clusters suggests that there are meaningful differences between classes that the classifier can be trained to recognize.
2. Look within species classes to assess variability among events.
    -  The existence of clusters within an individual species class may indicate that there are outlying events with anomalous features that should be excluded from the training set.

In pursuing these objectives, we might also want to consider which observational unit we'd like to use -- **click** or **event**? And would this change depending on which objective we are pursuing?

```{r}
#| output: false

library(identidrift) # package with my thesis data. On GitHub, "jackvfb/identidrift"
library(tidyverse)
library(vegan)
library(densityClust)
set.seed(3150)
```

## Cluster events using community dissimilarity index

Ecological communities are compared to one another by counting the different species that appear in each community and then generating a dissimilarity index using a method such as the Bray-Curtis dissimilarity.

To turn acoustic events into "communities," I choose a variable to use for comparison, then binned the clicks based on their values. For example, if I wanted to compare events on the basis of peak frequency, I would then subdivide the region of the acoustic spectrum from 100-160 kHz to form bins of a chosen width, e.g. 1 kHz. Then, for every event, I would count clicks in each bin (see @fig-bins for an illustration of the resulting distributions)

```{r}
#| label: fig-bins
#| fig-cap: "Faceted by species, you can see that each individual line in this plot follows the distribution of peak frequencies for an individual event."
#| echo: false
#| 
nbhf_clicks %>%
  ggplot(aes(x=peak, color=species, by=eventId))+
  geom_freqpoly(binwidth=1) +
  facet_wrap(~species, ncol=1, scale="free")
```

Once the counts are available for all the events, the dissimilarity index between all events could then be generated using `vegan::vegdist()`.

```{r}
#| results: hide
#| echo: true

#perform binning procedure using "peak" variable
pk <- identidrift::eventbin(nbhf_clicks, peak)

#generate distance matrix
dist <- vegan::vegdist(pk, method = "bray")

#use distance matrix to perform ordination
nmds <- vegan::metaMDS(dist)
```

```{r}
clust <- function(mat, title){
  dist <- vegdist(mat, method = "bray")
  nmds <- metaMDS(dist)
  scores(nmds) %>%
    as_tibble(rownames = "eventId") %>%
    left_join(select(nbhf_clicks, species, eventId, eventLabel), by="eventId") %>% 
    ggplot(aes(x = NMDS1, y = NMDS2, color=species))+
    geom_point()+
    # facet_wrap(~eventLabel) +
    ggtitle(title)
}
```

The clusters are then shown in @fig-event-clusters-1, along with plots that show clusters formed using the same procedure but with respect to different variables.

```{r}
#| label: fig-event-clusters
#| results: false
#| fig-cap: "Clusters with respect to different variables where each point represents a different event."
#| fig-subcap:
#|   - "peak frequency"
#|   - "3 dB Bandwidth"
#|   - "3 dB center frequency"

scores(nmds) %>%
    as_tibble(rownames = "eventId") %>%
    left_join(select(nbhf_clicks, species, eventId, eventLabel), by="eventId") %>% 
    ggplot(aes(x = NMDS1, y = NMDS2, color=species))+
    geom_point()+
    # facet_wrap(~eventLabel) +
    ggtitle("peak")

bw <- eventbin(nbhf_clicks, BW_3dB)
ctr <- eventbin(nbhf_clicks, centerkHz_3dB)
clust(bw, "bandwidth 3dB")
clust(ctr, "centerfreq 3dB")
```

### Discussion

- Events do appear to cluster broadly by class.
    - To better visualize the clusters I could plot a centroid and ellipsoid, which I have seen in other plots of this type.
- This method is probably sensitive to variability in the sizes of the events, so I wonder how results would change if we implemented rarefaction or other methods to make the sample size consistent across all events being compared.
- The main drawback of this methods seems to be that clusters must be formed based on the distributions in just one dimension. I cannot conceive of how this same procedure could be applied to multi-dimensional data.
- Additionally, this is not necessarily an accepted method of clustering in this field although, in my view, there are many parallels between "events" and "communities".

## Cluster clicks using Euclidean distance

If use clicks as our observational units, then there is no need to devise a procedure or method for handling relationships at the event level.

The clusters shown in @fig-mds are created by calculating the Euclidean distances between clicks. A few steps were taken to prepare the data:

1. An equal number of clicks (200) was sampled from each class to reduce the computational burden since the training set in it's entirety has over 4,500 clicks.
2. I removed some variables in order to eliminate strange artifacts in the MDS plot, which you can see developing in @fig-mds-2:
    - Measurements at 10 dB (min and max freq, center freq, Q, etc.) were omitted in favor of the 3 dB measurements.
    - Also, measurements of secondary and tertiary peak frequencies and resulting troughs were also ommited, since not all clicks were the same in this respect.

```{r}
#sample to reduce computational burden
samp <- nbhf_clicks %>% 
  group_by(species) %>% 
  slice_sample(n=200) %>% # select 200 clicks at random from each species
  ungroup() %>% 
  select(-c(UID:noiseLevel, BinaryFile, eventLabel, detectorName, db)) %>% 
  mutate(id = 1:n()) %>%
  filter(complete.cases(.))

# create copy of sample data with some variables removed
samp_drop <- samp %>% 
  select(id, species, eventId, duration:peak, Q_3dB:centerkHz_3dB)

# define function to perform MDS
doMDS <- function(x) {
 
   x.dist <- x %>%
    select(-c(species, eventId)) %>%
    column_to_rownames("id") %>%
    scale() %>% # important step is to scale
    dist(method="euclidean")
  
  x.mds <- x.dist %>%
    cmdscale(k=4) %>% # Use max four dimensions
    as.data.frame %>%
    setNames(paste0("PC", 1:ncol(.))) %>%
    mutate(species = x$species, eventId = x$eventId)
  
  return(x.mds)
}

#perform MDS on each data set, with and without redundant variables
drop <- doMDS(samp_drop)
not_drop <- doMDS(samp)
```

```{r}
#| label: fig-mds
#| fig-cap: "Euclidean distances between clicks used for MDS. Species represented by different colors"
#| fig-subcap:
#|   - "Redundant variables removed"
#|   - "No variables removed"

drop %>%
  ggplot(aes(PC1, PC2, color=species)) +
  geom_point()

not_drop %>%
  ggplot(aes(PC1, PC2, color=species)) +
  geom_point()

```

### Discussion

- The MDS plot reveals broad separation among the species classes, similar to @fig-event-clusters.
- The fact that strange artifacts appear in the plot with all variables included (@fig-mds-2) is puzzling.
    - Does this rationalize the removal of some variables?

## Cluster Clicks using `densityClust`

```{r}
#| output: false
dist <- samp_drop %>%
  select(-c(species, eventId)) %>%
  column_to_rownames("id") %>%
  scale() %>%
  dist(method="euclidean")

cl <- densityClust(dist)
cl1 <- findClusters(cl, rho=20, delta=1)
cl2 <- findClusters(cl, rho=10, delta=1)
```

Using the data with reduced variables, the density clustering algorithm formed the clusters shown in @fig-density-clust. The counts of each species in each of the resulting clusters is given in @tbl-clust-assn.

While the value of $\delta$ was kept constant at 1, changing the value of $\rho$ allowed me to partition the data into fewer clusters (@fig-density-clust-1) or more clusters (@fig-density-clust-2).


```{r}
#| label: fig-density-clust
#| fig-cap: "Density clusters with different thresholds chosen"
#| fig-subcap: 
#|     - "Four clusters formed with \u03c1=20 and \u03B4=1"
#|     - "Six clusters formed with \u03c1=10 and \u03B4=1"
plotDensityClust(cl1)
plotDensityClust(cl2)
```

```{r}
#| label: tbl-clust-assn
#| tbl-cap: "Table of cluster assignments"
#| tbl-subcap: 
#|     - "Cluster plot 1"
#|     - "Cluster plot 2"
#|     
table(samp_drop$species, cl1$clusters)
table(samp_drop$species, cl2$clusters)
```

### Discussion

- The picture emerging from this cluster plot is perhaps more nuanced than that given by the previous clustering methods.
- Some interesting patterns emerge when looking at @tbl-clust-assn:
    - When four clusters are formed, *Kogia* appears to have a strong affinitiy to cluster 2, and harbor porpoise to cluster 1. Dall's porpoise has a more even distribution across all four clusters though it is represented in the highest numbers in cluster three.
    - When six clusters are formed, *Kogia* begins to dissolve. About 2/3 of the clicks remain together in a single cluster but the rest get redistributed in separate clusters. Harbor porpoise remains overwhelmingly in cluster 1.
- Could some of this nuance be related to variation among individual events within each class?
- What is the optimal number of clusters?

## Identifying anomalous events

Using the four clusters formed in @fig-density-clust-1, I will explode each species class into the set of all of its events and then take the sum in each cluster. These counts are shown in @fig-2d-bin. The plots are separated by species class.

```{r}
clusters_to_df <- function(x){
  df <- data.frame(species = samp_drop$species,
                   eventId = samp_drop$eventId,
                   cluster = x$clusters)
}

x <- clusters_to_df(cl1)

plots <- x %>%
  nest(d = -species) %>%
  mutate(p = map(d, \(data) ggplot(data) + geom_bin2d(aes(x=cluster, y=eventId))))
```


```{r}
#| label: fig-2d-bin
#| fig-cap: "Counts of clicks in each cluster, seperated by both event and species"
#| fig-subcap: 
#|     - "Harbor porpoise clicks"
#|     - "Dall's porpoise clicks"
#|     - "Kogia clicks"

plots$p[[3]]
plots$p[[2]]
plots$p[[1]]
```

### Discussion

- For both *Kogia* and harbor porpoise, we see that clicks cluster predominately in a single cluster, 2 and 1, respectively.
- In these classes, we do not see evidence of anomalous events because, for the most part, the plots show an unbroken top-down chain. This means that all events contribute clicks into the dominant cluster.
    - While there are some clicks assigned to other clusters, within these same events there are also clicks that are assigned to the dominant cluster.
- Dall's porpoise events are more scattered across the clusters. The presence of disjoint line segments that are neither vertically or horizontally overlapping suggests that the events may split into several smaller clusters.

### Follow-up

As an addendum, here are the clusters formed for the Dall's porpoise class. The density plot suggests that algorithm strongly favors a solution of one cluster.
```{r}
samp.pd <- nbhf_clicks %>% 
  filter(species=="pd") %>%
  select(species, eventId, duration:peak, Q_3dB:centerkHz_3dB) %>%
  filter(complete.cases(.)) %>%
  mutate(id = 1:n())

dist.pd <- samp.pd %>%
  select(-c(species, eventId)) %>%
  column_to_rownames("id") %>%
  scale() %>%
  dist(method="euclidean")

mds.pd <- dist.pd %>%
    cmdscale(k=4) %>% # Use max four dimensions
    as.data.frame %>%
    setNames(paste0("PC", 1:ncol(.))) %>%
    mutate(eventId = samp.pd$eventId)

mds.pd %>%
  ggplot(aes(PC1, PC2, color=eventId))+
  geom_point()

cl.pd <- densityClust(dist.pd)
cl.pd <- findClusters(cl.pd, rho=2, delta=1)
plotDensityClust(cl.pd)

table(samp.pd$eventId, cl.pd$clusters)
```